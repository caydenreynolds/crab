WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ("#" | "//") ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

nullable = { "?" }
errable = { "!" }
reference = { "&" }
ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
typed_ident = { ident ~ ":" ~ crab_type }
crab_type = { reference? ~ ident ~ nullable? }

access_modifier = { ( "pub" | "pro" )? }

func = { fn_signature ~ code_block }
fn_signature = { access_modifier ~ "fn" ~ ident ~ "(" ~ fn_header_args ~ ")" ~ fn_return? }
fn_header_args = { (typed_ident ~ ",")* ~ typed_ident? }
fn_return = { "->" ~ crab_type+? ~ errable? }

code_block = { "{" ~ (control_block | statement)* ~ "}" }
// TODO: Remove semicolon requirement. For now, it simplifies things so we'll keep it
statement = { assignment? ~ ";" }
assignment = { var? ~ "=" }
var = { "var" }

control_block = { match_block | if_block | while_block | for_block }
match_block
if_block = { "if" ~ comparison ~ code_block ~ ("else if" ~ code_block)* ("else" ~ code_block)? }
while_block = { "while" ~ comparison ~ code_block }
for_block = { "for" ~ ((statement ~ comparison ~ statement) | (assignment | iterator) ~ code_block }


primitive = { int_primitive | float_primitive | bool_primitive | str_primitive }

int_primitive = { negative? ~ ASCII_DIGIT+ ~ int_type? }
negative = { "-" }
int_type = @{ (int_signed ~ int_bit_count) | int_type_shortcut }
int_type_shortcut = { "b" | "l" | "s" }
int_signed = { "i" | "u" }
int_bit_count = { "8" | "16" | "32" | "64" | "128" }

float_primitive = { negative? ~ ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT+)? ~ float_type? }
float_type = @{ "f" ~ float_bit_count? }
float_bit_count = { "32" | "64" }

bool_primitive = { "true" | "false" }
str_primitive = { "\"" ~ str_contents ~ "\"" }
str_contents = { "\\\"" | ( !"\"" ~ ANY) }

program = { SOI ~ func ~ EOI }

