WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ("#" | "//") ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
typed_ident = { ident ~ ":" ~ crab_type }

ident_list = { (ident ~ "," )* ~ ident ~ ","? }
typed_ident_list = { (typed_ident ~ "," )* ~ typed_ident ~ ","? }
expression_list = { (expression ~ "," )* ~ expression ~ ","? }

program = { SOI ~ function+ ~ EOI }

function = { fn_signature ~ code_block }
fn_signature = { "fn" ~ ident ~ "(" ~ typed_ident* ~ ")" ~ ("->" ~ crab_type)? }
fn_call = { ident ~ "(" ~ expression_list? ~ ")" }

code_block = { "{" ~ statement* ~ "}" }

statement = { (return_stmt | assignment | reassignment | fn_call ) }
assignment = { "let" ~ ident ~ "=" ~ expression }
reassignment = { ident ~ "=" ~ expression }
return_stmt = { "return" ~ expression? }
expression = { (primitive | fn_call | ident) }
primitive = { (uint64_primitive | string_primitive) }
uint64_primitive = @{ ASCII_DIGIT+ }

string_primitive = ${ ("\"" | NEWLINE) ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = @{ !"\"" ~ ANY }

// For now, we're only allowing primitive types
crab_type = @{ ( "Int" | "String" | "Float" ) }
