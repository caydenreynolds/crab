WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ("#" | "//") ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

reserved_word = { ( "true" | "false" ) }
ident = @{ !(reserved_word) ~ ((ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*) }
typed_ident = { crab_type ~ ident }

ident_list = { (ident ~ "," )* ~ ident ~ ","? }
typed_ident_list = { (typed_ident ~ "," )* ~ typed_ident ~ ","? }
expression_list = { (expression ~ "," )* ~ expression ~ ","? }

program = { SOI ~ function+ ~ EOI }

function = { fn_signature ~ code_block }
fn_signature = { "fn" ~ ident ~ "(" ~ typed_ident_list? ~ ")" ~ ("->" ~ crab_type)? }
fn_call = { ident ~ "(" ~ expression_list? ~ ")" }

code_block = { "{" ~ statement* ~ "}" }
expression = { (primitive | fn_call | ident) }

statement = { (return_stmt | assignment | reassignment | fn_call | if_stmt ) }
assignment = { "let" ~ ident ~ "=" ~ expression }
reassignment = { ident ~ "=" ~ expression }
return_stmt = { "return" ~ expression? }

if_stmt = { "if" ~ expression ~ code_block ~ else_stmt? }
else_stmt = { "else" ~ (if_stmt | code_block) }

primitive = { (uint64_primitive | string_primitive | bool_primitive) }
uint64_primitive = @{ ASCII_DIGIT+ }
bool_primitive = { "true" | "false" }

string_primitive = ${ ("\"" | NEWLINE) ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = @{ !("\"" | "\\") ~ ANY | ("\\" ~ ( "n" )) }

// For now, we're only allowing primitive types
crab_type = @{ ( "Int" | "String" | "Float" | "Bool" ) }
